#!/usr/bin/env node
const rl = require('readline');
const notifier = require('node-notifier');

const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')

const adapter = new FileSync('db.json')
const db = low(adapter)

// Set some defaults (required if your JSON file is empty)
db.defaults({ todos: []}).write()

const commands = ['new', 'get', 'complete', 'delete', 'help', 'activate', 'deactivate']

const chalk = require('chalk')
const args = process.argv

// usage represents the help guide
const usage = function() {
  const usageText = `
  todo helps you manage you todo tasks.

  usage:
    todo <command>

    commands can be:

    new:        used to create a new todo
    get:        used to retrieve your todos
    complete:   used to mark a todo as complete
    delete:     used to remove a todo
    activate:   used to mark a todo as the active item
    deactivate: used to mark a todo as the inactive item
    help:       used to print the usage guide
  `

  console.log(usageText)
}

// used to log errors to the console in red color
function errorLog(error) {
  const eLog = chalk.red(error)
  console.log(eLog)
}

// we make sure the length of the arguments is exactly three
if (args.length > 3 
  && args[2] != 'complete' 
  && args[2] != 'delete'
  && args[2] != 'activate'
  && args[2] != 'deactivate'
  ) {
  errorLog(`only one argument can be accepted`)
  usage()
}

function prompt(question) {
  const r = rl.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
  });
  return new Promise((resolve, error) => {
    r.question(question, answer => {
      r.close()
      resolve(answer)
    });
  })
}

var CronJob = require('cron').CronJob;

function newTodo() {

  // new CronJob('* * * * * *', function() {
  //   notifier.notify({
  //     title: 'My notification',
  //     message: 'Hello, there!',
  //     reply: true
  //   });
  // }, null, true, 'America/Los_Angeles');

  const q = chalk.blue('Type in your todo\n')
  prompt(q).then(todo => {
    // add todo
    db.get('todos')
      .push({
        title: todo,
        complete: false,
        active: false
      })
      .write()
  })
}

function getTodos() {
  const todos = db.get('todos').value()
  let index = 1;
  todos.forEach(todo => {
    let todoText = `${index++}. ${todo.title}`
    let formattedText = ''
    if(todo.complete) {
      todoText += ' ✔ ️' // add a check mark
      formattedText = chalk.green(todoText);
    } else if(todo.active){ 
      formattedText = chalk.yellow(todoText);
    } else {
      formattedText = chalk.white(todoText);
    }
    console.log(formattedText);
  })
}

function validateToDoSelection() {
  // check that length
  if (args.length != 4) {
    errorLog("invalid number of arguments passed for complete command")
    return false
  }

  let n = Number(args[3])
  // check if the value is a number
  if (isNaN(n)) {
    errorLog("please provide a valid number for complete command")
    return false
  }

  // check if correct length of values has been passed
  let todosLength = db.get('todos').value().length
  if (n > todosLength) {
    errorLog("invalid number passed for complete command.")
    return false
  }

  return true
}

function activateTodo() {
  if(validateToDoSelection()) {
    let n = Number(args[3])
    // update the todo item marked as complete
    db
      .set(`todos[${n-1}].active`, true)
      .write()
  }
}

function deactivateTodo() {
  if(validateToDoSelection()) {
    let n = Number(args[3])
    // update the todo item marked as complete
    db
      .set(`todos[${n-1}].active`, false)
      .write()
  }
}

function completeTodo() {
  if(validateToDoSelection()) {
    let n = Number(args[3])
    // update the todo item marked as complete
    db
      .set(`todos[${n-1}].complete`, true)
      .set(`todos[${n-1}].active`, false)
      .write()
  }
}

function deleteTodo() {
  if(validateToDoSelection()) {
    let n = Number(args[3])
    // delete by title
    // TODO replace this with a ID in the future
    const toDo = db.get('todos').nth(n-1).value()
    db.get('todos').remove({title: toDo.title}).write();
  }
}


switch(args[2]) {
  case 'help':
    usage()
    break
  case 'n'|'new':
    newTodo()
    break
  case 'g'||'get':
    getTodos()
    break
  case 'complete':
    completeTodo();
    break
  case 'delete':
    deleteTodo();
    break;
  case 'activate':
    activateTodo();
    break;
  case 'deactivate':
    deactivateTodo();
    break;  
  default:
    errorLog('invalid command passed')
    usage()
}
